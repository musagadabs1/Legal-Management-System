@model LegalManagementSystem.Models.Document
@using LegalManagementSystem.Helpers

@{
    ViewBag.Title = "Create";
}
<link href="~/Content/css/select2.min.css" rel="stylesheet" />
<h2>Add Document</h2>

@using (Html.BeginForm("Create", "Documents", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="margin-left:40px;">
        <hr />
        @if (ViewBag.Error != null)
        {
            <span style="color:red;">@ViewBag.Error.ToString()</span>
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div>
                <div>
                    @Html.LabelFor(model => model.MatterNumber, "Case Number", htmlAttributes: new { @class = "control-label" })
                </div>
                @Html.DropDownListFor(model => model.MatterNumber, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control matterId", @id = "matterNumber" })
                @Html.ValidationMessageFor(model => model.MatterNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelForRequired(model => model.DocName, "Document Name", htmlAttributes: new { @class = "control-label ", @placeholder = "Document Name" })
                @Html.EditorFor(model => model.DocName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DocName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div>
                @Html.LabelForRequired(model => model.AssignedDate, "Assigned Date", htmlAttributes: new { @class = "control-label ", @placeholder = "Assigned Date" })
                @Html.EditorFor(model => model.AssignedDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AssignedDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div>
                @Html.LabelForRequired(model => model.DocPath, "Document Path", htmlAttributes: new { @class = "control-label" })
                <input type="file" name="fileBase" id="fileBase" class="form-control" />
                @Html.ValidationMessageFor(model => model.DocPath, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add" class="btn btn-primary btn-block" />
            </div>
        </div>
    </div>
}

<script src="~/Scripts/select2.min.js"></script>


<script>
    $(document).ready(function () {

        select2DropDown('matterNumber', '@Url.Action("GetMatterForDropDown", "Documents")', "Select Case");

    });


    function select2DropDown(elementId,url,placeholder) {
        $('#' + elementId).select2({
            placeholder: placeholder,
            //minimumInputLength:3,
            allowclear: true,
            theme: "classic",
            ajax: {
                url: url,
                datatype: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        searchKey: params.term
                    };
                },
                processResults: function (data,params) {
                    return {
                        results: data
                    };
                }
            }
        });
    }

</script>
